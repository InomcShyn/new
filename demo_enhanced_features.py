#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Demo script ƒë·ªÉ test c√°c t√≠nh nƒÉng enhanced c·ªßa Facebook Groups Comment Scraper
"""

import re
from fb_groups_comment_scraper_enhanced import (
    validate_username, 
    extract_comment_content, 
    extract_user_info_from_url,
    clean_text
)

def test_username_validation():
    """Test enhanced username validation"""
    print("=== TEST USERNAME VALIDATION ===")
    
    test_usernames = [
        "Nguy·ªÖn VƒÉn A",           # Valid Vietnamese name
        "John Doe",               # Valid English name
        "Maria Garc√≠a",           # Valid with accent
        "Dr. Smith",              # Valid with title
        "Like",                   # Invalid - UI element
        "Reply",                  # Invalid - UI element
        "12345",                  # Invalid - numbers only
        "A",                      # Invalid - too short
        "Very Long Name That Exceeds Maximum Length Limit",  # Invalid - too long
        "User@123",               # Invalid - special chars
        "Th√≠ch",                  # Invalid - Vietnamese UI
        "B√¨nh lu·∫≠n",              # Invalid - Vietnamese UI
        "",                       # Invalid - empty
        "   ",                    # Invalid - whitespace only
    ]
    
    for username in test_usernames:
        is_valid = validate_username(username)
        status = "‚úÖ VALID" if is_valid else "‚ùå INVALID"
        print(f"{status}: '{username}'")

def test_content_extraction():
    """Test enhanced content extraction"""
    print("\n=== TEST CONTENT EXTRACTION ===")
    
    test_cases = [
        {
            "text": "Nguy·ªÖn VƒÉn A: ƒê√¢y l√† comment r·∫•t hay!",
            "username": "Nguy·ªÖn VƒÉn A",
            "expected": "ƒê√¢y l√† comment r·∫•t hay!"
        },
        {
            "text": "John Doe Like Reply Share Comment",
            "username": "John Doe",
            "expected": ""
        },
        {
            "text": "Maria Garc√≠a: C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª th√¥ng tin h·ªØu √≠ch n√†y!",
            "username": "Maria Garc√≠a",
            "expected": "C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª th√¥ng tin h·ªØu √≠ch n√†y!"
        },
        {
            "text": "@username ƒê√¢y l√† reply cho comment tr∆∞·ªõc",
            "username": "username",
            "expected": "ƒê√¢y l√† reply cho comment tr∆∞·ªõc"
        },
        {
            "text": "Reply to John Doe: T√¥i ƒë·ªìng √Ω v·ªõi √Ω ki·∫øn c·ªßa b·∫°n",
            "username": "John Doe",
            "expected": "T√¥i ƒë·ªìng √Ω v·ªõi √Ω ki·∫øn c·ªßa b·∫°n"
        }
    ]
    
    for i, case in enumerate(test_cases, 1):
        result = extract_comment_content(case["text"], case["username"])
        expected = case["expected"]
        status = "‚úÖ PASS" if result == expected else "‚ùå FAIL"
        print(f"Test {i} {status}:")
        print(f"  Input: '{case['text']}'")
        print(f"  Username: '{case['username']}'")
        print(f"  Expected: '{expected}'")
        print(f"  Result: '{result}'")
        print()

def test_url_extraction():
    """Test user info extraction from URLs"""
    print("=== TEST URL EXTRACTION ===")
    
    test_urls = [
        "https://www.facebook.com/profile.php?id=123456789",
        "https://m.facebook.com/user.php?id=987654321",
        "https://mbasic.facebook.com/john.doe.123",
        "https://facebook.com/123456789012345",
        "https://www.facebook.com/groups/123456789/posts/987654321/",
    ]
    
    for url in test_urls:
        info = extract_user_info_from_url(url)
        print(f"URL: {url}")
        print(f"  Extracted: {info}")
        print()

def test_text_cleaning():
    """Test text cleaning functionality"""
    print("=== TEST TEXT CLEANING ===")
    
    test_texts = [
        "Like    Reply   Share   Comment",
        "Th√≠ch   Tr·∫£ l·ªùi   Chia s·∫ª   B√¨nh lu·∫≠n",
        "2 hours ago",
        "3 ph√∫t tr∆∞·ªõc",
        "Top fan",
        "B√¨nh lu·∫≠n h√†ng ƒë·∫ßu",
        "View more comments",
        "Xem th√™m b√¨nh lu·∫≠n",
        "This is a normal comment with extra   spaces",
        "Comment with\nmultiple\nlines",
    ]
    
    for text in test_texts:
        cleaned = clean_text(text)
        print(f"Original: '{text}'")
        print(f"Cleaned:  '{cleaned}'")
        print()

def test_ui_detection():
    """Test UI-only content detection"""
    print("=== TEST UI DETECTION ===")
    
    from fb_groups_comment_scraper_enhanced import EnhancedFacebookGroupsScraper
    
    # Create a mock scraper instance just for testing
    scraper = EnhancedFacebookGroupsScraper.__new__(EnhancedFacebookGroupsScraper)
    
    test_contents = [
        "Like",                    # UI only
        "Reply",                   # UI only
        "Th√≠ch",                   # UI only
        "2 hours ago",             # UI only
        "Top fan",                 # UI only
        "View more",               # UI only
        "This is a real comment",  # Real content
        "C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª!",  # Real content
        "123",                     # Numbers only
        "!!!",                     # Punctuation only
        "a",                       # Too short
        "A very long and meaningful comment that contains actual content and is not just UI elements",  # Real content
    ]
    
    for content in test_contents:
        is_ui = scraper.is_ui_only_content(content)
        status = "UI ONLY" if is_ui else "REAL CONTENT"
        print(f"{status}: '{content}'")

def main():
    """Run all tests"""
    print("üß™ ENHANCED FEATURES DEMO")
    print("=" * 50)
    
    test_username_validation()
    test_content_extraction()
    test_url_extraction()
    test_text_cleaning()
    test_ui_detection()
    
    print("\nüéâ Demo completed!")
    print("\nüí° C√°c t√≠nh nƒÉng enhanced ƒë√£ ƒë∆∞·ª£c test:")
    print("  ‚úÖ Username validation v·ªõi nhi·ªÅu tr∆∞·ªùng h·ª£p")
    print("  ‚úÖ Content extraction th√¥ng minh")
    print("  ‚úÖ URL parsing cho user info")
    print("  ‚úÖ Text cleaning t·ªëi ∆∞u")
    print("  ‚úÖ UI detection ch√≠nh x√°c")

if __name__ == "__main__":
    main()