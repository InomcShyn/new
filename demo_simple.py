#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Demo ƒë∆°n gi·∫£n ƒë·ªÉ test c√°c t√≠nh nƒÉng enhanced c·ªßa Facebook Groups Comment Scraper
Kh√¥ng c·∫ßn dependencies
"""

import re

def validate_username(username):
    """Enhanced username validation"""
    if not username or len(username.strip()) < 2:
        return False
    
    # Remove common prefixes/suffixes
    username = re.sub(r'^(Mr\.|Ms\.|Mrs\.|Dr\.|Prof\.)\s*', '', username)
    username = re.sub(r'\s+(Jr\.|Sr\.|I|II|III|IV|V)$', '', username)
    
    # Check for UI elements
    ui_elements = ['like', 'reply', 'share', 'comment', 'th√≠ch', 'tr·∫£ l·ªùi', 'chia s·∫ª', 'b√¨nh lu·∫≠n']
    if username.lower().strip() in ui_elements:
        return False
    
    # Check for valid characters
    if not re.match(r'^[a-zA-Z√Ä-·ªπ\s\-\.\']+$', username):
        return False
    
    # Check length
    if len(username) > 50:
        return False
    
    return True

def extract_comment_content(text, username=""):
    """Enhanced comment content extraction"""
    if not text:
        return ""
    
    # Remove username from beginning
    if username and text.startswith(username):
        text = text[len(username):].strip()
    
    # Remove username with word boundaries
    if username:
        text = re.sub(rf'\b{re.escape(username)}\b', '', text, count=1).strip()
    
    # Remove common prefixes
    prefixes_to_remove = [
        r'^[A-Z][a-z]+:\s*',  # "Name: "
        r'^@[a-zA-Z0-9_]+\s*',  # "@username "
        r'^Reply to [A-Z][a-z]+:\s*',  # "Reply to Name: "
    ]
    
    for prefix in prefixes_to_remove:
        text = re.sub(prefix, '', text)
    
    # Clean up extra whitespace
    text = re.sub(r'\s+', ' ', text).strip()
    
    # Remove leading/trailing punctuation
    text = re.sub(r'^[:\s]+', '', text)
    text = re.sub(r'[\s:]+$', '', text)
    
    return text

def extract_user_info_from_url(url):
    """Enhanced user info extraction from Facebook URLs"""
    patterns = {
        'profile_id': r'profile\.php\?id=(\d+)',
        'username': r'facebook\.com/([^/?]+)',
        'user_id': r'/(\d{10,})/?$'
    }
    
    user_info = {}
    for key, pattern in patterns.items():
        match = re.search(pattern, url)
        if match:
            user_info[key] = match.group(1)
    
    return user_info

def clean_text(text):
    """Clean text by removing UI elements"""
    if not text:
        return ""
    text = re.sub(r'\s+', ' ', text.strip())
    # Remove UI elements but preserve Vietnamese text
    ui_patterns = [
        r'\b(Like|Reply|Share|Comment|Translate|Hide|Report|Block)\b',
        r'\b(Th√≠ch|Tr·∫£ l·ªùi|Chia s·∫ª|B√¨nh lu·∫≠n|D·ªãch|·∫®n|B√°o c√°o|Ch·∫∑n)\b',
        r'\b\d+\s*(min|minutes?|hours?|days?|seconds?|ph√∫t|gi·ªù|ng√†y|gi√¢y)\s*(ago|tr∆∞·ªõc)?\b',
        r'\b(Top fan|Most relevant|Newest|All comments|B√¨nh lu·∫≠n h√†ng ƒë·∫ßu)\b'
    ]
    for pattern in ui_patterns:
        text = re.sub(pattern, '', text, flags=re.IGNORECASE)
    return text.strip()

def is_ui_only_content(text):
    """Enhanced check for UI-only content"""
    if not text or len(text.strip()) < 5:
        return True
    
    text_clean = text.lower().strip()
    
    # UI patterns
    ui_patterns = [
        r'^(like|reply|share|comment|translate|hide|report|block)(\s+\d+)?\s*$',
        r'^(th√≠ch|tr·∫£ l·ªùi|chia s·∫ª|b√¨nh lu·∫≠n|d·ªãch|·∫©n|b√°o c√°o|ch·∫∑n)(\s+\d+)?\s*$',
        r'^\d+\s*(min|minutes?|hours?|days?|ph√∫t|gi·ªù|ng√†y)\s*(ago|tr∆∞·ªõc)?\s*$',
        r'^(top fan|most relevant|newest|all comments|view more|see more)\s*$',
        r'^(b√¨nh lu·∫≠n h√†ng ƒë·∫ßu|xem th√™m|hi·ªÉn th·ªã th√™m)\s*$',
        r'^\d+\s*(like|love|reaction|th√≠ch|y√™u|c·∫£m x√∫c)\s*$',
        r'^(see translation|xem b·∫£n d·ªãch|translate|d·ªãch)\s*$',
        r'^(write a comment|vi·∫øt b√¨nh lu·∫≠n|comment|b√¨nh lu·∫≠n)\s*$',
        r'^(group|nh√≥m|groups|c√°c nh√≥m)\s*$',
        r'^[^\w√Ä-·ªπ]*$',  # Only punctuation/symbols
        r'^\d+$',  # Only numbers
        r'^[a-z]{1,3}\s*$'  # Very short text
    ]
    
    for pattern in ui_patterns:
        if re.match(pattern, text_clean):
            return True
    
    # Check if it's just repeated characters
    if len(set(text_clean)) <= 3 and len(text_clean) > 5:
        return True
    
    return False

def test_username_validation():
    """Test enhanced username validation"""
    print("=== TEST USERNAME VALIDATION ===")
    
    test_usernames = [
        "Nguy·ªÖn VƒÉn A",           # Valid Vietnamese name
        "John Doe",               # Valid English name
        "Maria Garc√≠a",           # Valid with accent
        "Dr. Smith",              # Valid with title
        "Like",                   # Invalid - UI element
        "Reply",                  # Invalid - UI element
        "12345",                  # Invalid - numbers only
        "A",                      # Invalid - too short
        "Very Long Name That Exceeds Maximum Length Limit",  # Invalid - too long
        "User@123",               # Invalid - special chars
        "Th√≠ch",                  # Invalid - Vietnamese UI
        "B√¨nh lu·∫≠n",              # Invalid - Vietnamese UI
        "",                       # Invalid - empty
        "   ",                    # Invalid - whitespace only
    ]
    
    for username in test_usernames:
        is_valid = validate_username(username)
        status = "‚úÖ VALID" if is_valid else "‚ùå INVALID"
        print(f"{status}: '{username}'")

def test_content_extraction():
    """Test enhanced content extraction"""
    print("\n=== TEST CONTENT EXTRACTION ===")
    
    test_cases = [
        {
            "text": "Nguy·ªÖn VƒÉn A: ƒê√¢y l√† comment r·∫•t hay!",
            "username": "Nguy·ªÖn VƒÉn A",
            "expected": "ƒê√¢y l√† comment r·∫•t hay!"
        },
        {
            "text": "John Doe Like Reply Share Comment",
            "username": "John Doe",
            "expected": ""
        },
        {
            "text": "Maria Garc√≠a: C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª th√¥ng tin h·ªØu √≠ch n√†y!",
            "username": "Maria Garc√≠a",
            "expected": "C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª th√¥ng tin h·ªØu √≠ch n√†y!"
        },
        {
            "text": "@username ƒê√¢y l√† reply cho comment tr∆∞·ªõc",
            "username": "username",
            "expected": "ƒê√¢y l√† reply cho comment tr∆∞·ªõc"
        },
        {
            "text": "Reply to John Doe: T√¥i ƒë·ªìng √Ω v·ªõi √Ω ki·∫øn c·ªßa b·∫°n",
            "username": "John Doe",
            "expected": "T√¥i ƒë·ªìng √Ω v·ªõi √Ω ki·∫øn c·ªßa b·∫°n"
        }
    ]
    
    for i, case in enumerate(test_cases, 1):
        result = extract_comment_content(case["text"], case["username"])
        expected = case["expected"]
        status = "‚úÖ PASS" if result == expected else "‚ùå FAIL"
        print(f"Test {i} {status}:")
        print(f"  Input: '{case['text']}'")
        print(f"  Username: '{case['username']}'")
        print(f"  Expected: '{expected}'")
        print(f"  Result: '{result}'")
        print()

def test_url_extraction():
    """Test user info extraction from URLs"""
    print("=== TEST URL EXTRACTION ===")
    
    test_urls = [
        "https://www.facebook.com/profile.php?id=123456789",
        "https://m.facebook.com/user.php?id=987654321",
        "https://mbasic.facebook.com/john.doe.123",
        "https://facebook.com/123456789012345",
        "https://www.facebook.com/groups/123456789/posts/987654321/",
    ]
    
    for url in test_urls:
        info = extract_user_info_from_url(url)
        print(f"URL: {url}")
        print(f"  Extracted: {info}")
        print()

def test_text_cleaning():
    """Test text cleaning functionality"""
    print("=== TEST TEXT CLEANING ===")
    
    test_texts = [
        "Like    Reply   Share   Comment",
        "Th√≠ch   Tr·∫£ l·ªùi   Chia s·∫ª   B√¨nh lu·∫≠n",
        "2 hours ago",
        "3 ph√∫t tr∆∞·ªõc",
        "Top fan",
        "B√¨nh lu·∫≠n h√†ng ƒë·∫ßu",
        "View more comments",
        "Xem th√™m b√¨nh lu·∫≠n",
        "This is a normal comment with extra   spaces",
        "Comment with\nmultiple\nlines",
    ]
    
    for text in test_texts:
        cleaned = clean_text(text)
        print(f"Original: '{text}'")
        print(f"Cleaned:  '{cleaned}'")
        print()

def test_ui_detection():
    """Test UI-only content detection"""
    print("=== TEST UI DETECTION ===")
    
    test_contents = [
        "Like",                    # UI only
        "Reply",                   # UI only
        "Th√≠ch",                   # UI only
        "2 hours ago",             # UI only
        "Top fan",                 # UI only
        "View more",               # UI only
        "This is a real comment",  # Real content
        "C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª!",  # Real content
        "123",                     # Numbers only
        "!!!",                     # Punctuation only
        "a",                       # Too short
        "A very long and meaningful comment that contains actual content and is not just UI elements",  # Real content
    ]
    
    for content in test_contents:
        is_ui = is_ui_only_content(content)
        status = "UI ONLY" if is_ui else "REAL CONTENT"
        print(f"{status}: '{content}'")

def main():
    """Run all tests"""
    print("üß™ ENHANCED FEATURES DEMO")
    print("=" * 50)
    
    test_username_validation()
    test_content_extraction()
    test_url_extraction()
    test_text_cleaning()
    test_ui_detection()
    
    print("\nüéâ Demo completed!")
    print("\nüí° C√°c t√≠nh nƒÉng enhanced ƒë√£ ƒë∆∞·ª£c test:")
    print("  ‚úÖ Username validation v·ªõi nhi·ªÅu tr∆∞·ªùng h·ª£p")
    print("  ‚úÖ Content extraction th√¥ng minh")
    print("  ‚úÖ URL parsing cho user info")
    print("  ‚úÖ Text cleaning t·ªëi ∆∞u")
    print("  ‚úÖ UI detection ch√≠nh x√°c")
    
    print("\nüìã T√≥m t·∫Øt c·∫£i ti·∫øn:")
    print("  1. X√°c ƒë·ªãnh t√™n ng∆∞·ªùi d√πng ch√≠nh x√°c h∆°n v·ªõi multi-strategy approach")
    print("  2. X·ª≠ l√Ω content t·ªëi ∆∞u v·ªõi smart cleaning v√† validation")
    print("  3. Enhanced deduplication v·ªõi nhi·ªÅu ti√™u ch√≠")
    print("  4. Better comment type detection (Comment vs Reply)")
    print("  5. User verification detection")
    print("  6. Improved error handling v√† progress tracking")

if __name__ == "__main__":
    main()